// Code generated by "stringer -type Type"; DO NOT EDIT.

package binary

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Uint8-255]
	_ = x[Uint16-254]
	_ = x[Uint32-253]
	_ = x[Uint64-252]
	_ = x[Int8-251]
	_ = x[Int16-250]
	_ = x[Int32-249]
	_ = x[Int64-248]
	_ = x[Int-247]
	_ = x[Uint-246]
	_ = x[Float32-245]
	_ = x[Float64-244]
	_ = x[String-243]
	_ = x[Bool-242]
	_ = x[Duration-241]
	_ = x[Rune-240]
	_ = x[Timestamp-239]
	_ = x[Bytes-238]
	_ = x[Array-237]
	_ = x[ArrayInt-236]
	_ = x[ArrayUint-235]
	_ = x[ArrayFloat-234]
	_ = x[ArrayFloat32-233]
	_ = x[ArrayString-232]
	_ = x[ArrayBool-231]
	_ = x[Struct-230]
	_ = x[StructField-229]
	_ = x[StructValue-228]
	_ = x[Map-227]
	_ = x[MapKey-226]
	_ = x[MapValue-225]
	_ = x[ElementValue-224]
	_ = x[ElementRef-223]
}

const _Type_name = "ElementRefElementValueMapValueMapKeyMapStructValueStructFieldStructArrayBoolArrayStringArrayFloat32ArrayFloatArrayUintArrayIntArrayBytesTimestampRuneDurationBoolStringFloat64Float32UintIntInt64Int32Int16Int8Uint64Uint32Uint16Uint8"

var _Type_index = [...]uint8{0, 10, 22, 30, 36, 39, 50, 61, 67, 76, 87, 99, 109, 118, 126, 131, 136, 145, 149, 157, 161, 167, 174, 181, 185, 188, 193, 198, 203, 207, 213, 219, 225, 230}

func (i Type) String() string {
	i -= 223
	if i >= Type(len(_Type_index)-1) {
		return "Type(" + strconv.FormatInt(int64(i+223), 10) + ")"
	}
	return _Type_name[_Type_index[i]:_Type_index[i+1]]
}
